{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import { IResult } from \"./IResult\";\r\nimport { IReport } from \"./IReport\";\r\n\r\nconst axios = require('axios');\r\nconst chalk = require('chalk');\r\n\r\nconst regex = /http:\\/\\/[\\w\\.]+:[0-9]+\\/[\\w-_]?/gm;\r\nconst results = new Array<IResult>();\r\n\r\nconst init = (args: string[]): void => {\r\n    if (args.length < 5)\r\n        throw new Error('No valid args count');\r\n    else {\r\n        const method = args[2].toUpperCase();\r\n        const count = parseInt(args[3]);\r\n        const url = args[4];\r\n        testUrl(url);\r\n        if (method == 'GET')\r\n            doGet(url, count);\r\n        if (method == 'POST')\r\n            doPost(url, count, args[5]);\r\n    }\r\n}\r\n\r\nconst doGet = async (url: string, count: number): Promise<void> => {\r\n    const begin = Date.now();\r\n    for (let i = 0; i < count; i++) {\r\n        let result: IResult;\r\n        try {\r\n            let begin = Date.now();\r\n            const res = await get(url);\r\n            let end = Date.now();\r\n            result = {error: false, success: true, answerTime: end - begin}\r\n            infoLog(res.data);\r\n        } catch (err) {\r\n            result = {error: true, success: false, answerTime: 0}\r\n            errorLog(err.message);\r\n        }\r\n        results.push(result);\r\n    }\r\n    const end = Date.now();\r\n    const totalReqTime = Math.round(((end - begin) * 100) / 100);\r\n    printReport(count, totalReqTime);\r\n    \r\n}\r\n\r\nconst printReport = (count: number, totalReqTime: number): void => {\r\n    const res = calculate(count, totalReqTime);\r\n    const total = chalk.green('Total requests: ' + res.total);\r\n    const success = chalk.yellow('Success requests: ' + res.success + '%');\r\n    const rejected = chalk.red('Rejected requests: ' + res.rejected + '%');\r\n    const time = Math.round(res.avverageTime * 100) / 100\r\n    const average = chalk.blue('Average requests time: ' + time + ' ms');\r\n    const totalTime = chalk.blue('Total request time: ' + totalReqTime + ' ms');\r\n    const minTime = chalk.green('Min request time: ' + res.minRequestTime + ' ms');\r\n    const maxTime = chalk.red('Max request time: ' + res.maxRequestTime + ' ms');\r\n    console.log(total);\r\n    console.log(success);\r\n    console.log(rejected);\r\n    console.log(average);\r\n    console.log(totalTime);\r\n    console.log(minTime);\r\n    console.log(maxTime);\r\n}\r\n\r\nconst doPost = async (url: string, count: number, data?: any): Promise<void> => {\r\n    const begin = Date.now();\r\n    for (let i = 0; i < count; i++) {\r\n        let result: IResult;\r\n        try {\r\n            let begin = Date.now();\r\n            const res = await post(url, data);\r\n            let end = Date.now();\r\n            result = {error: false, success: true, answerTime: end - begin}\r\n            infoLog(res.data);\r\n        } catch (err) {\r\n            result = {error: true, success: false, answerTime: 0}\r\n            errorLog(err.message);\r\n        }      \r\n        results.push(result);  \r\n    }\r\n    const end = Date.now();\r\n    const totalReqTime = Math.round(((end - begin) * 100) / 100);\r\n    printReport(count, totalReqTime);\r\n}\r\n\r\nconst testUrl = (url: string): void => {\r\n    if (!url.match(regex))\r\n        throw new Error('Url is not valid');\r\n}\r\n\r\nconst get = async (url: string): Promise<any> => {\r\n    const res = await axios.get(url);\r\n    return res;\r\n}\r\n\r\nconst post = async (url:string, data: any): Promise<any> => {\r\n    const res = await axios.post(url, data);\r\n    return res;\r\n}\r\n\r\nconst calculate = (count: number, totalReqTime: number): IReport => {\r\n    const report: IReport = {\r\n        total: count, \r\n        rejected: allRejected(count), \r\n        success: allSuccess(count), \r\n        avverageTime: average(), \r\n        totalRequestTime: totalReqTime,\r\n        minRequestTime: min(),\r\n        maxRequestTime: max()\r\n    };\r\n    return report;\r\n}\r\n\r\nconst min = (): number => {\r\n    const res = results.filter(i => i.success == true).map(i => i.answerTime).reduce((min, p) => p < min ? p : min);\r\n    return Math.round((res * 100) / 100);\r\n}\r\n\r\nconst max = (): number => {\r\n    const res = results.filter(i => i.success == true).map(i => i.answerTime).reduce((max, p) => p > max ? p : max);\r\n    return Math.round((res * 100) / 100);\r\n}\r\n\r\nconst average = (): number => {\r\n    const res = results.filter(i => i.success == true).map(i => i.answerTime).reduce((val, idx) => val += idx);\r\n    return res / results.filter(i => i.success).length;\r\n}\r\n\r\nconst allRejected = (count: number): number => {\r\n    const res = results.filter(i => i.error == true).map(i => i).length;\r\n    return res * 100 / count;\r\n}\r\n\r\nconst allSuccess = (count: number): number => {\r\n    const res = results.filter(i => i.success == true).map(i => i).length;\r\n    return res * 100 / count;\r\n}\r\n\r\nconst errorLog = (err: Error): void => {\r\n    const eLog = chalk.red(err);\r\n    console.log(eLog);\r\n} \r\n\r\nconst infoLog = (msg: string): void => {\r\n    const iLog = chalk.blue(msg);\r\n    console.log(iLog);\r\n}\r\n\r\ntry {\r\n    init(process.argv);\r\n} catch (err) {\r\n    errorLog(err.message);\r\n}\r\n"]}