{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B,MAAM,KAAK,GAAG,oCAAoC,CAAC;AAEnD,MAAM,IAAI,GAAG,CAAC,IAAc,EAAQ,EAAE;IAClC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SACtC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACrC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,CAAC;QACb,IAAI,MAAM,IAAI,KAAK;YACf,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtB,IAAI,MAAM,IAAI,MAAM;YAChB,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KACnC;AACL,CAAC,CAAA;AAED,MAAM,KAAK,GAAG,CAAO,GAAW,EAAE,KAAa,EAAiB,EAAE;IAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC5B,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACzB;AACL,CAAC,CAAA,CAAA;AAED,MAAM,MAAM,GAAG,CAAO,GAAW,EAAE,KAAa,EAAE,IAAU,EAAiB,EAAE;IAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC5B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACzB;AACL,CAAC,CAAA,CAAA;AAED,MAAM,OAAO,GAAG,CAAC,GAAW,EAAQ,EAAE;IAClC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACxC,CAAC,CAAA;AAED,MAAM,GAAG,GAAG,CAAO,GAAW,EAAgB,EAAE;IAC5C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,OAAO,GAAG,CAAC;AACf,CAAC,CAAA,CAAA;AAED,MAAM,IAAI,GAAG,CAAO,GAAU,EAAE,IAAS,EAAgB,EAAE;IACvD,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACxC,OAAO,GAAG,CAAC;AACf,CAAC,CAAA,CAAA;AAED,MAAM,QAAQ,GAAG,CAAC,GAAU,EAAQ,EAAE;IAClC,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtB,CAAC,CAAA;AAED,IAAI;IACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CACtB;AAAC,OAAO,GAAG,EAAE;IACV,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;CACzB","sourcesContent":["const axios = require('axios');\nconst chalk = require('chalk');\n\nconst regex = /http:\\/\\/[\\w\\.]+:[0-9]+\\/[\\w-_]?/gm;\n\nconst init = (args: string[]): void => {\n    if (args.length < 5)\n        throw new Error('No valid args count');\n    else {\n        const method = args[2].toUpperCase();\n        const count = parseInt(args[3]);\n        const url = args[4];\n        testUrl(url);\n        if (method == 'GET')\n            doGet(url, count);\n        if (method == 'POST')\n            doPost(url, count, args[5]);\n    }\n}\n\nconst doGet = async (url: string, count: number): Promise<void> => {\n    for (let i = 0; i < count; i++) {\n        const res = await get(url);\n        console.log(res.data);\n    }\n}\n\nconst doPost = async (url: string, count: number, data?: any): Promise<void> => {\n    for (let i = 0; i < count; i++) {\n        const res = await post(url, data);\n        console.log(res.data);\n    }\n}\n\nconst testUrl = (url: string): void => {\n    if (!url.match(regex))\n    throw new Error('Url is not valid');\n}\n\nconst get = async (url: string): Promise<any> => {\n    const res = await axios.get(url);\n    return res;\n}\n\nconst post = async (url:string, data: any): Promise<any> => {\n    const res = await axios.post(url, data);\n    return res;\n}\n\nconst errorLog = (err: Error): void => {\n    const eLog = chalk.red(err);\n    console.log(eLog);\n} \n\ntry {\n    init(process.argv);\n} catch (err) {\n    errorLog(err.message);\n}\n"]}